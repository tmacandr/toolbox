#!/usr/bin/tclsh
# ************************************************************************
# FILE: format_file.tcl
#
# DESCRIPTION:
#    Tcl script that removes certain lines from an input file.
#*************************************************************************


# ***********************************************
# PROCEDURE NAME: remove_header_info 
#
# DESCRIPTION:
#    Removes all lines from the first to the
#    string"Address,Type,Timestamp".  This marks
#    the beginning of the profile needed by the
#    models.
#
#    This fixes a some inconsistencies betwen what
#    is generated by QEMU and what is epxected by
#    the Nehalem models (as input).  Specifically,
#    the following mods are made:
#
#    1) The header markers (line 1):
#
#       "Address,Type,Timestamp"
#
#       becomes:
#
#       "Address,Type,Op_Type"
#
#    2) The data-type marker (line 2):
#
#       "hex,string,integer"
#
#       becomes:
#
#       "hex,string,string"
#
#    The rest of the profile remains the same,
#    which is of the format:
#
#        <hex-address>,<operation>,<op-type>
#
# ***********************************************
proc remove_header_info { input_file output_file } {

   set fd_in [open $input_file r]

   set fd_out [open $output_file w]

   #
   # Remove lines up to the line that is either:
   #      "Address,Type,Timestamp"
   #      "Address,Type,Op_Type"
   #      "Address,Type,<something>"
   # Anything before that are debug statements
   #
   while { [eof $fd_in] != 1 } {

       gets $fd_in line

       set index [string first "Address,Type" $line]

       if { $index != -1 } {

           break

       }
   }

   #
   # Write "Address,Type,Op_Type"
   #
   puts $fd_out "Address,Type,Op_Type"

   #
   # Now replace "hex,string,integer" with
   # "hex,string,string" ... which may already
   # be done.
   #
   gets $fd_in line

   if { $line != "hex,string,integer" } {

      puts "---> expected 'hex,string,integer'.  Got '$line'"
   }

   puts $fd_out "hex,string,string"

   #
   # Now write the rest of the
   # operations of the profile
   #
   while { [eof $fd_in] != 1 } {

       gets $fd_in line

       puts $fd_out $line
   }

   close $fd_out

   close $fd_in
}


# ***********************************************
# PROCEDURE NAME: wash_out_line
#
# DESCRIPTION:
#    Strips out lines that begin with the item
#    'start_marker'.
# ***********************************************
proc wash_out_line { input_file start_marker } {

   set fd_in [open $input_file r]

   set to_file "$input_file.txt"

   set fd_out [open $to_file w]

   while { [eof $fd_in] != 1 } {

       gets $fd_in line

       set marker [string first $start_marker $line]

       if { $marker != 0 } {

           puts $fd_out $line

       }
   }

   close $fd_out

   close $fd_in

   exec mv $to_file $input_file
}


# ***********************************************
# PROCEDURE NAME: remove_blank_lines
#
# DESCRIPTION:
#    Removes empty lines ...
# ***********************************************
proc remove_blank_lines { input_file } {

   set fd_in [open $input_file r]

   set to_file "$input_file.txt"

   set fd_out [open $to_file w]

   while { [eof $fd_in] != 1 } {

       gets $fd_in line

       set len [llength $line]

       if { $len > 0 } {

           puts $fd_out $line

       }
   }

   close $fd_out

   close $fd_in

   exec mv $to_file $input_file
}


# ***********************************************
# PROCEDURE NAME: main ... sort of ...
#
# DESCRIPTION:
#    Pretty-print the Results file ...
# ***********************************************
puts "Begin - prep profile results"

set input_file [lindex $argv 0]

set output_file "after.txt"

puts "Inut File....: $input_file"
puts "Output File..: $output_file"

remove_header_info $input_file $output_file

wash_out_line $output_file "End QEMU"

remove_blank_lines $output_file

puts "End - "

